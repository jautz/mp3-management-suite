#!/usr/bin/perl -w
#
# $Id: mms-tag2filename,v 1.3 2012-04-09 13:17:52 odin Exp $
# $Name: rel_1_03 $
#
###############################################################################
#
# Copyright (C) 2004   Joachim Jautz   http://www.jay-jay.net/contact.html
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
###############################################################################

use File::Basename;
use File::Compare;
use File::Find;
use Getopt::Long;
use Pod::Usage;
use strict;

use MP3::Info;
use MP3::InfoTag ':typical';
use Util::Logger;

my $VERSION = get_version('$Name: rel_1_03 $') || 'non-released; CVS $Id: mms-tag2filename,v 1.3 2012-04-09 13:17:52 odin Exp $';

##### process command line options #############################################

my $options = { # set defaults
  case => undef,
  help => 0,
  man => 0,
  pattern => '((ARTIST)) - ((TITLE))',
  recurse => 0,
  simulate => 0,
  verbose => 'INFO',
  version => '',
  weed => 0,
  DIRS => [],
  FILES => []
};

unless (parseCommandLineOptions($options)) {
  usage_err("could not parse command line arguments");
}

##### instantiate used classes #################################################

my $log = Util::Logger->new({ loglevel => $options->{verbose} });

##### special command line options #############################################

if ($options->{help} == 1) {
  pod2usage(-exitval => 0, -verbose => 0);
} elsif ($options->{help} > 1) {
  pod2usage(-exitval => 0, -verbose => 1);
} elsif ($options->{man}) {
  pod2usage(-exitval => 0, -verbose => 2);
} elsif ($options->{version}) {
  print "$VERSION\n";
  exit(0);
} elsif (!@ARGV) {
  usage_err("at least one file or directory expected");
} else {
  foreach my $item (@ARGV) {
    if (-d $item) {
      push @{$options->{DIRS}}, $item;
    } elsif (-f $item) {
      ($item =~ m/\.mp3/i)
        ? push @{$options->{FILES}}, $item
        : $log->print('WARN', "Ignoring file argument '$item'. ".
                              "Only files with .mp3 extension are processed; ".
                              "other files have no ID3 tags by convention.");
    } else {
      $log->print('WARN', "Ignoring command line argument '$item'. ".
                          "It is neither a directory nor a file.");
    }
  }
}

##### core functionality #######################################################

# process directories
foreach my $dir (@{$options->{DIRS}}) {
  find({ preprocess => \&preprocess, wanted => \&process }, $dir);
}

# process files
foreach my $file (@{$options->{FILES}}) {
  $log->print('INFO', 'processing file '.$file);
  processFile($file);
}

$log->print('INFO', 'Done.');
exit 0;

################################################################################
##### SUBROUTINES ##############################################################
################################################################################

sub preprocess {
  $log->print('INFO', 'processing directory '.$File::Find::dir);
  my @result = ();
  while (my $element = shift @_) {
    if (-d $element  &&  $options->{recurse}  &&  $element !~ m/^\.{1,2}$/  ||
        -f $element  &&  $element =~ m/\.mp3$/i) {
      push @result, $element;
    }
  }
  return sort(@result);
}

################################################################################

sub process {
  # File::Find also passes current directory name that we do not need here
  return if (-d $_);
  processFile($_);
}

################################################################################

sub processFile {
  my $file = shift;
  unless (-f $file && -r $file) {
    $log->print('WARN', "file '$file' is no file or not readable");
    return;
  }
  my ($name, $path, $extension);
  ($name, $path, $extension) = fileparse($file, '\.\w+');
  my $basename = $path.$extension;

  my $tag = get_mp3tag($file, 1);
  if (defined $tag) {
    # CREATE FILENAME BY PATTERN
    my $newName = $options->{pattern};
    unless (tag2string( { tag => $tag,
                          str => \$newName,
                          case => $options->{case} } ))
    {
      $log->print('ERROR', "file '$file': tag2string failed: ".
                            MP3::InfoTag::getError());
      MP3::InfoTag::flushWarnings();
      return;
    }
    if (my @warnings = MP3::InfoTag::flushWarnings()) {
      $log->print('WARN', "file '$file': ".join('; ', @warnings));
    }

    # WEEDING OF SPECIAL CHARACTERS -- print info if user did not demand this
    my $weedCheck = $newName;
    $newName = weedSpecialChars($newName, $options->{weed});
    if ($options->{weed} == 0 && $weedCheck ne $newName) {
      $log->print('INFO', "file '$basename': illegal characters replaced ".
                          "'$weedCheck' ==> '$newName'");
    }

    # RENAMING
    if ($newName eq $name) {
      $log->print('MORE',
                  "file '$basename' already named correctly. Doing nothing.");
    } else {
      # prepend path to make sure not to move the file into the current
      # working directory and append original extension
      $newName = $path.$newName.$extension;

      my $targetExists = 0;
      if (-e $newName) {
        if (lc($newName) eq lc($file)) {
          # normally this would mean that there is a file with the same name,
          # only different in at least one character's case...
          # ...but maybe the filesystem does not bother about case (e.g. FAT)
          # and says (as result of -e) that the given name already exists.
          # to make sure, we'll compare the contents:
          $log->print('DEBUG', "file '$basename': -e target: comparing files");
          $targetExists = 1 if (compare($file, $newName) != 0);
        } else {
          $targetExists = 1;
        }
      }

      if ($targetExists) {
        $log->print('WARN',
                    "file '$file' ==> '$newName': ".
                    "cannot perform renaming. Target file already exists.");

      } elsif ($options->{simulate}) {
        $log->print('INFO', "file '$file': new name would be '$newName'");

      } elsif (-w $file) {
        if (rename $file, $newName) {
          $log->print('MORE', "file '$file' renamed to '$newName'");
        } else {
          $log->print('ERROR', "file '$file': renaming to '$newName' failed");
        }

      } else {
        $log->print('WARN', "file '$file' is read-only. Doing nothing.");
      }
    }
  } else {
    $log->print('WARN', "file '$file': ID3 tag not defined. Doing nothing.");
  }
}

################################################################################

sub parseCommandLineOptions {
  my $opts = shift;
  return undef unless (ref($opts) eq 'HASH');

  my $optionParser = Getopt::Long::Parser->new(config => ["bundling"]);

  return $optionParser->getoptions(
    'case|c=i' => \$opts->{case},
    'help|h|?+' => \$opts->{help},
    'man' => \$opts->{man},
    'pattern=s' => \$opts->{pattern},
    'recurse|r' => \$opts->{recurse},
    'simulate|s' => \$opts->{simulate},
    'verbose|v=s' => \$opts->{verbose},
    'version|V' => \$opts->{version},
    'weed|w+' => \$opts->{weed}
  );
}

################################################################################
# get_version('$Name: rel_1_03 $')
#
# Extracts the release version from the CVS Name Tag that was used to checkout
# or export the file from the repository.
# Returns undef if it is empty (e.g. after checkout/export without -r <CVSTAG>)
# or if it does not match the pattern (expects something like rel_1_23).
# Otherwise a string like 1.23 is returned.
#
sub get_version {
  return undef unless (defined $_[0]);

  return $_[0] =~ m/rel_(\d+)_(\d+)/ ? "$1.$2" : undef;
}

################################################################################
# usage_err([<string> err])
#
# This exits the program with return code 1 after printing a hint how
# to use it.
# This hint is the SYNOPSIS section of the program's POD documentation.
# The optional err argument can be given to print an error message first.
#
sub usage_err {
  my $err = shift;

  if (defined $err) {
    pod2usage(-exitval => 1, -verbose => 0, -message => "\nERROR: $err\n");
  } else {
    pod2usage(-exitval => 1, -verbose => 0);
  }
}

################################################################################
# weedSpecialChars(<string> fn, <int> mode)
# makes fn a valid filename by weeding special characters
#
sub weedSpecialChars {
  my $fn = shift;
  my $mode = shift;
  return $fn unless (defined $fn && $mode =~ m/\d+/);

  # basic weeding, always performed
  $fn =~ tr/\x{20}-\x{7E}/_/cs; # keep only 7bit ascii printables
  $fn =~ s/[\\\/:<>|]/_/g;      # replace chars forbiden in filenames

  # full weeding if requested
  if ($mode >= 1) {
    $fn =~ tr/0-9A-Za-z_-/_/cs; # limit to alphanumerics, dashes, underscores
    $fn =~ s/["'`]//g;          # drop quote-like chars
  }

  $fn =~ s/_{2,}/_/g;           # condense multiple subsequent underscores
  $fn =~ s/^_|_$//g;            # drop leading/trailing underscores

  return $fn;
}



__END__


=head1 NAME

mms-tag2filename - generate MP3 filenames from ID3 tag



=head1 SYNOPSIS

How to get help:
If one of the B<--help> options is specified once a short overview will
be printed;
if specified twice you will get detailed information about command line options.
B<--man> gives you the whole manual.

B<mms-tag2filename>
[ B<-c>, B<--case> I<NUMBER> ]
[ B<--pattern> I<STRING> ]
[ B<-r>, B<--recurse> ]
[ B<-s>, B<--simulate> ]
[ B<-v>, B<--verbose> I<STRING> ]
[ B<-w>, B<--weed> ]
{ F<FILE> | F<DIRECTORY> } F<...>

B<mms-tag2filename> B<-?>, B<-h>, B<--help> | B<--man>

B<mms-tag2filename> B<-V>, B<--version>



=head1 DESCRIPTION

B<mms-tag2filename> is part of the `mp3ManagementSuite' which is a collection of
programs that help maintaining music collections.

You can decide which .mp3 files will be processed by passing names of files or
directories. At least one file or directory is expected.

For each file it will generate a file name based upon the information within
the file's ID3 tag. It will only rename the file if all the necessary
information can be gathered, otherwise it will report an error message and
leave the file unchanged.

Please read the section ID3 TAG VERSIONS for general information about tags as
well as some explanations how different tag versions are handled by this
program.



=head1 OPTIONS

This paragraph describes the possible options that can be used to modify this
program's behaviour.
If a long option name requires an argument then the short form does so, too.
Long names can be abbreviated but must stay unique.
Short options can be bundled even if they have arguments; thus `-a12b34c' is
equivalent to `-a 12 -b 34 -c'.
To avoid ambiguity you can use ` -- ' to seperate the options from the list of
directories and files.

=over 4

=item B<-?>, B<-h>, B<--help>

Prints the possible options and exits.


=item B<--man>

Prints the whole manual and exits.


=item B<-c>, B<--case> I<NUMBER>

Sets the case conversion mode affecting the generated filename (default: no
changes). I<NUMBER> can be:

  0     all characters in lower case
  1     Capitalize the first character, the rest will be lower case
  2     Capitalize The First Character Of Each Word, Even_This-Way


=item B<--pattern> I<STRING>

Sets a custom pattern for the desired filename without file extension; C<.mp3>
will be appended by this program.
You can define any filename format by using placeholders like C<((TITLE))>.
If you are using an up-to-date version of MP3::InfoTag (v0.40+) the placeholder
names can also be specified in lower case for your convenience.
Using quotes around your pattern is stongly recommended in order to prevent
shell interpretation of special characters.
Default is C<((ARTIST)) - ((TITLE))>.
Possible placeholder names are:

  TITLE
  ARTIST
  ALBUM
  YEAR
  COMMENT
  TRACKNUM
  GENRE


=item B<-r>, B<--recurse>

Enables recursive processing of subdirectories for each of the given directory
arguments.


=item B<-s>, B<--simulate>

Read-only mode, no changes will be made. Helps finding missing ID3 tags and
similar problems.
This mode is a bit more verbose than the `real' mode because in a simulation
you will probably want to see what B<would> happen. More precicely, operations
that would change a file will be reported as C<INFO> while simulating, but in
`real' mode you will have to switch to C<MORE> to get such an operation
reported.


=item B<-v>, B<--verbose> I<STRING>

Adjusts the level of output verbosity. There are five categories, ordered by
severity. This setting means that all messages up to the given severity level
will be reported; less severe messages will be suppressed.

I<STRING> defaults to C<INFO> which means that all messages from the categories
C<FATAL>, C<ERROR>, C<WARN> and C<INFO> will be reported.
Possible values for I<STRING> are:

  FATAL
  ERROR
  WARN
  INFO
  MORE


=item B<-V>, B<--version>

Prints the program version and exits.


=item B<-w>, B<--weed>

Enables the removal of some special characters that may be used within tag
fields but should not occur in filenames.

The replacement character is the underscore. Subsequent replacements result in
a single underscore. Moreover, when it affects the start or end of the file
name the weeded characters will not be replaced but trimmed.

When the B<--weed> switch is specified anything but letters, digits, dashes and
underscores will be replaced. Moreover, quotes, apostrophs, and backticks will
be omitted, i.e. not replaced but dropped.

Note that some basic weeding is always done: anything that is not a 7bit ASCII
printable character will be replaced as well as the following characters that
are reserved on some OS: \ E<sol> : E<lt> E<gt> E<verbar>

History: in former releases the B<--weed> switch could be given multiple times
causing additive weeding. This feature has been dropped and the weeding rules
modified as described above.



=back



=head1 ID3 TAG VERSIONS

The so-called tag is a small optional part of an MPEG Layer 3 file that contains
information about the audio part, e.g. the artist's name, a comment etc.

There are two major versions of MP3 tag formats, C<ID3v1> and C<ID3v2>.
All programs of the `mp3ManagementSuite' are focused on the C<ID3v1> tag
(or C<ID3v1.1> if the C<TRACKNUM> field is used).
In most cases the presence of an C<ID3v2> tag will be simply ignored.

More specifically, it will never be read from or written to a version2 tag.
There are only two actions that involve version2 tags:
You can use B<mms-detagtor> to find files depending on their tag version
and you can use B<mms-settag> to erase version2 tags.

This behaviour is due to the author's opinion that C<ID3v2> is totally
superfluous. Most people are not even able to maintain the v1-tags of their
music archive (except if they use tools like this ;)).
Moreover, in comparison to v1-tags that are appended to the file, v2-tags are
prepended and this means that the whole file must be rewritten every time a
v2-tag is changed. Contrary opinions are respected but there are other tools for
those people's requirements.



=head1 COPYRIGHT AND LICENCE

Copyright (C) 2004   Joachim Jautz   http://www.jay-jay.net/contact.html

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

=cut
